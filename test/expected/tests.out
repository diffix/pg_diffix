CREATE EXTENSION IF NOT EXISTS pg_diffix;
LOAD 'pg_diffix';
SET pg_diffix.session_access_level = 'publish';
-- Create test data.
CREATE TABLE test_customers (id INTEGER PRIMARY KEY, city TEXT, discount REAL);
INSERT INTO test_customers VALUES
  (0, NULL, NULL), (1, 'Berlin', 1.0), (2, 'Berlin', 1.0), (3, 'Rome', 0.5), (4, 'London', 2.0), (5, 'Berlin', 2.0),
  (6, 'Rome', 1.0), (7, 'Rome', 0.5), (8, 'Berlin', 0.0), (9, 'Rome', 1.0), (10, 'Berlin', 2.0), (11, 'Rome', 1.5),
  (12, 'Rome', 0.5), (13, 'Rome', 0.5), (14, 'Berlin', 1.5), (15, 'Berlin', 1.0);
CREATE TABLE test_products (id INTEGER PRIMARY KEY, name TEXT, price REAL);
INSERT INTO test_products VALUES (0, NULL, NULL), (1, 'Food', 1.5),
  (2, 'Car', 100.0), (3, 'House', 400.0), (4, 'Movie', 10.0);
CREATE TABLE test_purchases (cid INTEGER, pid INTEGER);
INSERT INTO test_purchases VALUES (0, 0), (0, 1), (0, 3), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1),
  (7, 1), (8, 2), (9, 1), (10, 2), (11, 1), (12, 1), (13, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2),
  (7, 1), (8, 1), (9, 2), (1, 2), (1, 2), (2, 1), (3, 0), (NULL, NULL), (4, 3), (5, 3), (6, 4), (7, -1),
  (7, 4), (8, -2), (9, -3), (10, -4);
CREATE TABLE test_patients (id INTEGER PRIMARY KEY, name TEXT, city TEXT);
INSERT INTO test_patients VALUES
  (0, NULL, 'Berlin'), (1, 'John', 'Berlin'), (2, 'Alice', 'Berlin'), (3, 'Bob', 'Berlin'), (4, 'Emma', 'Berlin'),
  (5, 'John', 'Berlin'), (6, 'Bob', 'Berlin'), (7, 'Alice', 'Rome'), (8, 'Dan', 'Rome'), (9, 'Anna', 'Rome'),
  (10, 'Mike', 'London'), (11, 'Mike', 'London'), (12, 'Mike', 'London'), (13, 'Mike', 'London');
CREATE TABLE empty_test_customers (id INTEGER PRIMARY KEY, name TEXT, city TEXT);
-- Pre-filtered table to maintain LCF tests which relied on WHERE clause.
CREATE TABLE london_customers (id INTEGER PRIMARY KEY, name TEXT, city TEXT);
INSERT INTO london_customers (SELECT * FROM test_customers WHERE city = 'London');
-- Config tables.
SECURITY LABEL FOR pg_diffix ON TABLE test_customers IS 'sensitive';
SECURITY LABEL FOR pg_diffix ON COLUMN test_customers.id IS 'aid';
SECURITY LABEL FOR pg_diffix ON TABLE test_purchases IS 'sensitive';
SECURITY LABEL FOR pg_diffix ON COLUMN test_purchases.cid IS 'aid';
SECURITY LABEL FOR pg_diffix ON TABLE test_patients IS 'sensitive';
SECURITY LABEL FOR pg_diffix ON COLUMN test_patients.id IS 'aid';
SECURITY LABEL FOR pg_diffix ON COLUMN test_patients.name IS 'aid';
SECURITY LABEL FOR pg_diffix ON TABLE empty_test_customers IS 'sensitive';
SECURITY LABEL FOR pg_diffix ON COLUMN empty_test_customers.id IS 'aid';
SECURITY LABEL FOR pg_diffix ON TABLE london_customers IS 'sensitive';
SECURITY LABEL FOR pg_diffix ON COLUMN london_customers.id IS 'aid';
----------------------------------------------------------------
-- Utilities
----------------------------------------------------------------
SELECT diffix.access_level();
 access_level 
--------------
 publish
(1 row)

----------------------------------------------------------------
-- Basic queries
----------------------------------------------------------------
SELECT COUNT(*) FROM test_customers;
 count 
-------
    16
(1 row)

SELECT COUNT(*) FROM test_purchases;
 count 
-------
    34
(1 row)

SELECT COUNT(city), COUNT(DISTINCT city) FROM test_customers;
 count | count 
-------+-------
    15 |     2
(1 row)

SELECT COUNT(DISTINCT cid) FROM test_purchases;
 count 
-------
    13
(1 row)

SELECT city, COUNT(DISTINCT id) FROM test_customers GROUP BY 1;
  city  | count 
--------+-------
 Rome   |     8
 Berlin |     8
(2 rows)

----------------------------------------------------------------
-- Multi-AID queries
----------------------------------------------------------------
SELECT city FROM test_patients GROUP BY 1;
 city 
------
(0 rows)

SELECT COUNT(*), COUNT(city), COUNT(DISTINCT city) FROM test_patients;
 count | count | count 
-------+-------+-------
    10 |    10 |     0
(1 row)

----------------------------------------------------------------
-- LCF & Filtering
----------------------------------------------------------------
SELECT id FROM test_customers;
 id 
----
(0 rows)

SELECT city FROM test_customers;
  city  
--------
 Rome
 Rome
 Rome
 Rome
 Rome
 Rome
 Rome
 Rome
 Berlin
 Berlin
 Berlin
 Berlin
 Berlin
 Berlin
 Berlin
 Berlin
(16 rows)

SELECT city FROM test_customers GROUP BY 1 HAVING length(city) <> 4;
  city  
--------
 Berlin
(1 row)

SELECT COUNT(*), COUNT(city), COUNT(DISTINCT city) FROM london_customers;
 count | count | count 
-------+-------+-------
     0 |     0 |     0
(1 row)

----------------------------------------------------------------
-- Empty tables
----------------------------------------------------------------
SELECT COUNT(*), COUNT(city), COUNT(DISTINCT city) FROM empty_test_customers;
 count | count | count 
-------+-------+-------
     0 |     0 |     0
(1 row)

----------------------------------------------------------------
-- Supported functions for defining buckets
----------------------------------------------------------------
SELECT COUNT(*) FROM test_customers
  GROUP BY substring(city, 1, 1);
 count 
-------
     8
     7
(2 rows)

SELECT COUNT(*) FROM test_customers
  GROUP BY width_bucket(id, 0, 1000, 10), width_bucket(id::float, 0.0, 1000.0, 10);
 count 
-------
    18
(1 row)

SELECT COUNT(*) FROM test_customers
  GROUP BY round(id::float, -1), round(id::numeric, -1);
ERROR:  function round(double precision, integer) does not exist
LINE 2:   GROUP BY round(id::float, -1), round(id::numeric, -1);
                   ^
HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
SELECT COUNT(*) FROM test_customers
  GROUP BY round(id::float), ceil(id::float), ceiling(id::float), floor(id::float);
 count 
-------
(0 rows)

SELECT COUNT(*) FROM test_customers
  GROUP BY round(id::numeric), ceil(id::numeric), ceiling(id::numeric), floor(id::numeric);
 count 
-------
(0 rows)

SELECT 
  diffix.round_by(id::numeric, 5),
  diffix.round_by(id::double precision, 5),
  COUNT(*)
FROM test_customers
GROUP BY 1, 2;
 round_by | round_by | count 
----------+----------+-------
        0 |        0 |     2
        5 |        5 |     4
       10 |       10 |     4
       15 |       15 |     2
(4 rows)

SELECT 
  diffix.ceil_by(id::numeric, 5),
  diffix.ceil_by(id::double precision, 5),
  COUNT(*)
FROM test_customers
GROUP BY 1, 2;
 ceil_by | ceil_by | count 
---------+---------+-------
       5 |       5 |     4
      15 |      15 |     3
(2 rows)

SELECT 
  diffix.floor_by(id::numeric, 5),
  diffix.floor_by(id::double precision, 5),
  COUNT(*)
FROM test_customers
GROUP BY 1, 2;
 floor_by | floor_by | count 
----------+----------+-------
        0 |        0 |     5
        5 |        5 |     4
       10 |       10 |     5
(3 rows)

----------------------------------------------------------------
-- Allow all functions post-anonymization
----------------------------------------------------------------
SELECT 2 * length(city) FROM test_customers GROUP BY city;
 ?column? 
----------
        8
       12
(2 rows)

----------------------------------------------------------------
-- Unsupported queries
----------------------------------------------------------------
-- Get rejected because aggregators are unsupported.
SELECT SUM(id) FROM test_customers;
ERROR:  [PG_DIFFIX] Unsupported aggregate in query.
LINE 1: SELECT SUM(id) FROM test_customers;
               ^
SELECT MIN(id) + MAX(id) FROM test_customers;
ERROR:  [PG_DIFFIX] Unsupported aggregate in query.
LINE 1: SELECT MIN(id) + MAX(id) FROM test_customers;
               ^
SELECT city FROM test_customers GROUP BY 1 ORDER BY AVG(LENGTH(city));
ERROR:  [PG_DIFFIX] Unsupported aggregate in query.
LINE 1: ...LECT city FROM test_customers GROUP BY 1 ORDER BY AVG(LENGTH...
                                                             ^
SELECT count(city ORDER BY city) FROM test_customers;
ERROR:  [PG_DIFFIX] Feature 'ORDER BY clauses in aggregate expressions' is not currently supported.
SELECT count(*) FILTER (WHERE true) FROM test_customers;
ERROR:  [PG_DIFFIX] Feature 'FILTER clauses in aggregate expressions' is not currently supported.
-- Get rejected because only a subset of expressions is supported for defining buckets.
SELECT COUNT(*) FROM test_customers GROUP BY LENGTH(city);
ERROR:  [PG_DIFFIX] Unsupported function used to define buckets.
LINE 1: SELECT COUNT(*) FROM test_customers GROUP BY LENGTH(city);
                                                     ^
SELECT COUNT(*) FROM test_customers GROUP BY city || 'xxx';
ERROR:  [PG_DIFFIX] Use of operators to define buckets is not supported.
LINE 1: SELECT COUNT(*) FROM test_customers GROUP BY city || 'xxx';
                                                          ^
SELECT LENGTH(city) FROM test_customers;
ERROR:  [PG_DIFFIX] Unsupported function used to define buckets.
LINE 1: SELECT LENGTH(city) FROM test_customers;
               ^
SELECT city, 'aaaa' FROM test_customers;
ERROR:  [PG_DIFFIX] Simple constants are not allowed as bucket expressions.
LINE 1: SELECT city, 'aaaa' FROM test_customers;
                     ^
SELECT COUNT(*) FROM test_customers GROUP BY round(floor(id));
ERROR:  [PG_DIFFIX] Primary argument for a bucket function has to be a simple column reference.
LINE 1: SELECT COUNT(*) FROM test_customers GROUP BY round(floor(id)...
                                                     ^
SELECT COUNT(*) FROM test_customers GROUP BY floor(cast(discount AS integer));
ERROR:  [PG_DIFFIX] Primary argument for a bucket function has to be a simple column reference.
LINE 1: SELECT COUNT(*) FROM test_customers GROUP BY floor(cast(disc...
                                                     ^
SELECT COUNT(*) FROM test_customers GROUP BY substr(city, 1, id);
ERROR:  [PG_DIFFIX] Non-primary arguments for a bucket function have to be simple constants.
LINE 1: SELECT COUNT(*) FROM test_customers GROUP BY substr(city, 1,...
                                                     ^
SELECT COUNT(*) FROM test_customers GROUP BY substr('aaaa', 1, 2);
ERROR:  [PG_DIFFIX] Primary argument for a bucket function has to be a simple column reference.
LINE 1: SELECT COUNT(*) FROM test_customers GROUP BY substr('aaaa', ...
                                                     ^
-- Get rejected because of subqueries
SELECT COUNT(*), COUNT(x.city), COUNT(DISTINCT x.id)
FROM (
  SELECT * FROM test_customers
) x;
ERROR:  [PG_DIFFIX] Feature 'Subqueries in anonymizing queries' is not currently supported.
SELECT COUNT(*), COUNT(x.city), COUNT(DISTINCT x.user_id)
FROM (
  SELECT y.city as city, y.id as user_id
  FROM ( SELECT * FROM test_customers ) y
) x;
ERROR:  [PG_DIFFIX] Feature 'Subqueries in anonymizing queries' is not currently supported.
SELECT x.user_city, COUNT(*), COUNT(DISTINCT x.id), COUNT(DISTINCT x.cid)
FROM (
  SELECT id, cid, city as user_city
  FROM test_customers
  INNER JOIN test_purchases tp ON id = cid
) x
GROUP BY 1;
ERROR:  [PG_DIFFIX] Feature 'Subqueries in anonymizing queries' is not currently supported.
SELECT COUNT(DISTINCT x.modified_id) FROM ( SELECT id AS modified_id FROM test_customers ) x;
ERROR:  [PG_DIFFIX] Feature 'Subqueries in anonymizing queries' is not currently supported.
-- Get rejected because of subqueries, but used to be rejected because of their inner aggregation
SELECT * FROM ( SELECT COUNT(*) FROM test_customers ) x;
ERROR:  [PG_DIFFIX] Feature 'Subqueries in anonymizing queries' is not currently supported.
SELECT COUNT(city)
FROM (
  SELECT city FROM test_customers
  GROUP BY 1
) x;
ERROR:  [PG_DIFFIX] Feature 'Subqueries in anonymizing queries' is not currently supported.
-- Get rejected because of JOINs
SELECT COUNT(*), COUNT(DISTINCT id), COUNT(DISTINCT cid) FROM test_customers
  INNER JOIN test_purchases tp ON id = cid;
ERROR:  [PG_DIFFIX] Feature 'JOINs in anonymizing queries' is not currently supported.
SELECT COUNT(c.city), COUNT(p.name) FROM test_customers c
  LEFT JOIN test_purchases ON c.id = cid
  LEFT JOIN test_products p ON pid = p.id;
ERROR:  [PG_DIFFIX] Feature 'JOINs in anonymizing queries' is not currently supported.
SELECT city, COUNT(price) FROM test_customers, test_products GROUP BY 1;
ERROR:  [PG_DIFFIX] Feature 'JOINs in anonymizing queries' is not currently supported.
SELECT city, COUNT(price) FROM test_products, test_customers GROUP BY 1;
ERROR:  [PG_DIFFIX] Feature 'JOINs in anonymizing queries' is not currently supported.
SELECT city, COUNT(price) FROM test_products CROSS JOIN test_customers GROUP BY 1;
ERROR:  [PG_DIFFIX] Feature 'JOINs in anonymizing queries' is not currently supported.
-- Get rejected because of WHERE
SELECT COUNT(*) FROM test_customers WHERE city = 'London';
ERROR:  [PG_DIFFIX] Feature 'WHERE clauses in anonymizing queries' is not currently supported.
