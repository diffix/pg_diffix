CREATE EXTENSION IF NOT EXISTS pg_diffix;
LOAD 'pg_diffix';
SET pg_diffix.session_access_level = 'publish';
-- Create test data.
CREATE TABLE test_customers (id INTEGER PRIMARY KEY, city TEXT);
INSERT INTO test_customers VALUES
  (0, NULL), (1, 'Berlin'), (2, 'Berlin'), (3, 'Rome'), (4, 'London'), (5, 'Berlin'), (6, 'Rome'),
  (7, 'Rome'), (8, 'Berlin'), (9, 'Rome'), (10, 'Berlin'), (11, 'Rome'), (12, 'Rome'), (13, 'Rome'),
  (14, 'Berlin'), (15, 'Berlin');
CREATE TABLE test_products (id INTEGER PRIMARY KEY, name TEXT, price REAL);
INSERT INTO test_products VALUES (0, NULL, NULL), (1, 'Food', 1.5),
  (2, 'Car', 100.0), (3, 'House', 400.0), (4, 'Movie', 10.0);
CREATE TABLE test_purchases (cid INTEGER, pid INTEGER);
INSERT INTO test_purchases VALUES (0, 0), (0, 1), (0, 3), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1),
  (7, 1), (8, 2), (9, 1), (10, 2), (11, 1), (12, 1), (13, 2), (1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2),
  (7, 1), (8, 1), (9, 2), (1, 2), (1, 2), (2, 1), (3, 0), (NULL, NULL), (4, 3), (5, 3), (6, 4), (7, -1),
  (7, 4), (8, -2), (9, -3), (10, -4);
CREATE TABLE test_patients (id INTEGER PRIMARY KEY, name TEXT, city TEXT);
INSERT INTO test_patients VALUES
  (0, NULL, 'Berlin'), (1, 'John', 'Berlin'), (2, 'Alice', 'Berlin'), (3, 'Bob', 'Berlin'), (4, 'Emma', 'Berlin'),
  (5, 'John', 'Berlin'), (6, 'Bob', 'Berlin'), (7, 'Alice', 'Rome'), (8, 'Dan', 'Rome'), (9, 'Anna', 'Rome'),
  (10, 'Mike', 'London'), (11, 'Mike', 'London'), (12, 'Mike', 'London'), (13, 'Mike', 'London');
CREATE TABLE empty_test_customers (id INTEGER PRIMARY KEY, name TEXT, city TEXT);
-- Config tables.
SECURITY LABEL FOR pg_diffix ON TABLE test_customers IS 'sensitive';
SECURITY LABEL FOR pg_diffix ON COLUMN test_customers.id IS 'aid';
SECURITY LABEL FOR pg_diffix ON TABLE test_purchases IS 'sensitive';
SECURITY LABEL FOR pg_diffix ON COLUMN test_purchases.cid IS 'aid';
SECURITY LABEL FOR pg_diffix ON TABLE test_patients IS 'sensitive';
SECURITY LABEL FOR pg_diffix ON COLUMN test_patients.id IS 'aid';
SECURITY LABEL FOR pg_diffix ON COLUMN test_patients.name IS 'aid';
SECURITY LABEL FOR pg_diffix ON TABLE empty_test_customers IS 'sensitive';
SECURITY LABEL FOR pg_diffix ON COLUMN empty_test_customers.id IS 'aid';
----------------------------------------------------------------
-- Utilities
----------------------------------------------------------------
SELECT diffix.access_level();
 access_level 
--------------
 publish
(1 row)

----------------------------------------------------------------
-- Basic queries
----------------------------------------------------------------
SELECT COUNT(*) FROM test_customers;
 count 
-------
    14
(1 row)

SELECT COUNT(*) FROM test_purchases;
 count 
-------
    32
(1 row)

SELECT COUNT(city), COUNT(DISTINCT city) FROM test_customers;
 count | count 
-------+-------
    13 |     2
(1 row)

SELECT COUNT(DISTINCT cid) FROM test_purchases;
 count 
-------
    13
(1 row)

SELECT city, COUNT(DISTINCT id) FROM test_customers GROUP BY 1;
  city  | count 
--------+-------
 Rome   |     7
 Berlin |     5
(2 rows)

----------------------------------------------------------------
-- Multi-AID queries
----------------------------------------------------------------
SELECT city FROM test_patients GROUP BY 1;
  city  
--------
 Berlin
(1 row)

SELECT COUNT(*), COUNT(city), COUNT(DISTINCT city) FROM test_patients;
 count | count | count 
-------+-------+-------
     9 |     9 |     1
(1 row)

----------------------------------------------------------------
-- `JOIN` queries
----------------------------------------------------------------
SELECT COUNT(*), COUNT(DISTINCT id), COUNT(DISTINCT cid) FROM test_customers
  INNER JOIN test_purchases tp ON id = cid;
 count | count | count 
-------+-------+-------
    32 |    13 |    13
(1 row)

SELECT COUNT(c.city), COUNT(p.name) FROM test_customers c
  LEFT JOIN test_purchases ON c.id = cid
  LEFT JOIN test_products p ON pid = p.id;
 count | count 
-------+-------
    32 |    27
(1 row)

SELECT city, COUNT(price) FROM test_customers, test_products GROUP BY 1;
  city  | count 
--------+-------
 Rome   |    28
 Berlin |    21
(2 rows)

SELECT city, COUNT(price) FROM test_products, test_customers GROUP BY 1;
  city  | count 
--------+-------
 Rome   |    28
 Berlin |    21
(2 rows)

----------------------------------------------------------------
-- LCF & Filtering
----------------------------------------------------------------
SELECT id FROM test_customers;
 id 
----
(0 rows)

SELECT city FROM test_customers;
  city  
--------
 Rome
 Rome
 Rome
 Rome
 Rome
 Rome
 Rome
 Berlin
 Berlin
 Berlin
 Berlin
 Berlin
(12 rows)

SELECT city FROM test_customers GROUP BY 1 HAVING length(city) <> 4;
  city  
--------
 Berlin
(1 row)

SELECT COUNT(*), COUNT(city), COUNT(DISTINCT city) FROM test_customers WHERE city = 'London';
 count | count | count 
-------+-------+-------
     0 |     0 |     0
(1 row)

----------------------------------------------------------------
-- Non-aggregating subqueries
----------------------------------------------------------------
-- Reference result
SELECT COUNT(*), COUNT(x.city), COUNT(DISTINCT x.id) FROM test_customers x;
 count | count | count 
-------+-------+-------
    14 |    13 |    14
(1 row)

SELECT COUNT(*), COUNT(x.city), COUNT(DISTINCT x.id)
FROM (
  SELECT * FROM test_customers
) x;
 count | count | count 
-------+-------+-------
    14 |    13 |    14
(1 row)

SELECT COUNT(*), COUNT(x.city), COUNT(DISTINCT x.user_id)
FROM (
  SELECT y.city as city, y.id as user_id
  FROM ( SELECT * FROM test_customers ) y
) x;
 count | count | count 
-------+-------+-------
    14 |    13 |    14
(1 row)

SELECT x.user_city, COUNT(*), COUNT(DISTINCT x.id), COUNT(DISTINCT x.cid)
FROM (
  SELECT id, cid, 'City: ' || city as user_city
  FROM test_customers
  INNER JOIN test_purchases tp ON id = cid
) x
GROUP BY 1;
  user_city   | count | count | count 
--------------+-------+-------+-------
 City: Berlin |     9 |     3 |     3
 City: Rome   |    13 |     7 |     7
(2 rows)

SELECT COUNT(DISTINCT x.modified_id) FROM ( SELECT id + 1 AS modified_id FROM test_customers ) x;
 count 
-------
    14
(1 row)

----------------------------------------------------------------
-- Empty tables
----------------------------------------------------------------
SELECT COUNT(*), COUNT(city), COUNT(DISTINCT city) FROM empty_test_customers;
 count | count | count 
-------+-------+-------
     0 |     0 |     0
(1 row)

----------------------------------------------------------------
-- Supported functions for defining buckets
----------------------------------------------------------------
SELECT COUNT(*) FROM test_customers c
  LEFT JOIN test_purchases ON c.id = cid
  LEFT JOIN test_products p ON pid = p.id
  GROUP BY substring(city, 1, 1), width_bucket(c.id, 0, 1000, 10), width_bucket(price, 0.0, 1000.0, 10);
 count 
-------
     2
     3
     7
     2
(4 rows)

----------------------------------------------------------------
-- Supported functions for projection
----------------------------------------------------------------
SELECT COUNT(*), length(city), ceil(price), ceil(c.id) FROM test_customers c
  LEFT JOIN test_purchases ON c.id = cid
  LEFT JOIN test_products p ON pid = p.id
  GROUP BY city, price, c.id;
 count | length | ceil | ceil 
-------+--------+------+------
(0 rows)

----------------------------------------------------------------
-- Unsupported queries
----------------------------------------------------------------
-- Get rejected because aggregators are unsupported.
SELECT SUM(id) FROM test_customers;
ERROR:  [PG_DIFFIX] Unsupported aggregate in query.
LINE 1: SELECT SUM(id) FROM test_customers;
               ^
SELECT MIN(id) + MAX(id) FROM test_customers;
ERROR:  [PG_DIFFIX] Unsupported aggregate in query.
LINE 1: SELECT MIN(id) + MAX(id) FROM test_customers;
               ^
SELECT city FROM test_customers GROUP BY 1 ORDER BY AVG(LENGTH(city));
ERROR:  [PG_DIFFIX] Unsupported aggregate in query.
LINE 1: ...LECT city FROM test_customers GROUP BY 1 ORDER BY AVG(LENGTH...
                                                             ^
-- Get rejected because aggregating subqueries are not supported.
SELECT * FROM ( SELECT COUNT(*) FROM test_customers ) x;
ERROR:  [PG_DIFFIX] Feature 'aggregates in subqueries' is not currently supported.
SELECT COUNT(city)
FROM (
  SELECT city FROM test_customers
  GROUP BY 1
) x;
ERROR:  [PG_DIFFIX] Feature 'grouping in subqueries' is not currently supported.
-- Get rejected because only a subset of functions is supported for defining buckets.
SELECT COUNT(*) FROM test_customers c
  LEFT JOIN test_purchases ON c.id = cid
  LEFT JOIN test_products p ON pid = p.id
  GROUP BY length(city);
ERROR:  [PG_DIFFIX] Unsupported function used to define buckets.
LINE 4:   GROUP BY length(city);
                   ^
SELECT COUNT(*) FROM test_customers c
  LEFT JOIN test_purchases ON c.id = cid
  LEFT JOIN test_products p ON pid = p.id
  GROUP BY city || name;
ERROR:  [PG_DIFFIX] Unsupported operator used to define buckets.
LINE 4:   GROUP BY city || name;
                        ^
